//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""SinglePlayer"",
            ""id"": ""b6463d74-8fe1-4bce-a316-75d0803163c9"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""a916968c-7b82-451b-a2b0-d357eeb94065"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""35b45f42-d88d-497d-ae7a-2231f81076c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f86e920c-23f8-4860-8a7d-5dbe28385c4c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48f265ae-1132-480d-95d4-d3142029a27d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82f739fb-2172-4722-a904-4bc69f64603e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""258df8b5-fd56-4457-985c-d72aabcbc5a3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TwoPlayer"",
            ""id"": ""d77b6f29-cbc3-42e5-8a95-6f77aec613bf"",
            ""actions"": [
                {
                    ""name"": ""LeftPlayerUp"",
                    ""type"": ""Button"",
                    ""id"": ""11606118-8e3c-4d10-9213-e0a429db5674"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftPlayerDown"",
                    ""type"": ""Button"",
                    ""id"": ""b69982d2-074d-4ff6-badc-609121de4e79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightPlayerUp"",
                    ""type"": ""Button"",
                    ""id"": ""ce67ade1-0113-47cb-97f4-d83f32fbcb5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightPlayerDown"",
                    ""type"": ""Button"",
                    ""id"": ""cdb7b959-837c-449c-8eef-a65dcf10d1de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5389c61e-da8f-401b-9820-58e91d8526b1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPlayerUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""788b710d-4394-4a13-a81b-6d97ae8a9e6a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPlayerDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67e09de4-21b8-45eb-82c2-ca27dc54ec5e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPlayerUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79328574-7d2c-40f0-a77a-1255d539c341"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPlayerDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SinglePlayer
        m_SinglePlayer = asset.FindActionMap("SinglePlayer", throwIfNotFound: true);
        m_SinglePlayer_Up = m_SinglePlayer.FindAction("Up", throwIfNotFound: true);
        m_SinglePlayer_Down = m_SinglePlayer.FindAction("Down", throwIfNotFound: true);
        // TwoPlayer
        m_TwoPlayer = asset.FindActionMap("TwoPlayer", throwIfNotFound: true);
        m_TwoPlayer_LeftPlayerUp = m_TwoPlayer.FindAction("LeftPlayerUp", throwIfNotFound: true);
        m_TwoPlayer_LeftPlayerDown = m_TwoPlayer.FindAction("LeftPlayerDown", throwIfNotFound: true);
        m_TwoPlayer_RightPlayerUp = m_TwoPlayer.FindAction("RightPlayerUp", throwIfNotFound: true);
        m_TwoPlayer_RightPlayerDown = m_TwoPlayer.FindAction("RightPlayerDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SinglePlayer
    private readonly InputActionMap m_SinglePlayer;
    private List<ISinglePlayerActions> m_SinglePlayerActionsCallbackInterfaces = new List<ISinglePlayerActions>();
    private readonly InputAction m_SinglePlayer_Up;
    private readonly InputAction m_SinglePlayer_Down;
    public struct SinglePlayerActions
    {
        private @Controls m_Wrapper;
        public SinglePlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_SinglePlayer_Up;
        public InputAction @Down => m_Wrapper.m_SinglePlayer_Down;
        public InputActionMap Get() { return m_Wrapper.m_SinglePlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SinglePlayerActions set) { return set.Get(); }
        public void AddCallbacks(ISinglePlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
        }

        private void UnregisterCallbacks(ISinglePlayerActions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
        }

        public void RemoveCallbacks(ISinglePlayerActions instance)
        {
            if (m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISinglePlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_SinglePlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SinglePlayerActions @SinglePlayer => new SinglePlayerActions(this);

    // TwoPlayer
    private readonly InputActionMap m_TwoPlayer;
    private List<ITwoPlayerActions> m_TwoPlayerActionsCallbackInterfaces = new List<ITwoPlayerActions>();
    private readonly InputAction m_TwoPlayer_LeftPlayerUp;
    private readonly InputAction m_TwoPlayer_LeftPlayerDown;
    private readonly InputAction m_TwoPlayer_RightPlayerUp;
    private readonly InputAction m_TwoPlayer_RightPlayerDown;
    public struct TwoPlayerActions
    {
        private @Controls m_Wrapper;
        public TwoPlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftPlayerUp => m_Wrapper.m_TwoPlayer_LeftPlayerUp;
        public InputAction @LeftPlayerDown => m_Wrapper.m_TwoPlayer_LeftPlayerDown;
        public InputAction @RightPlayerUp => m_Wrapper.m_TwoPlayer_RightPlayerUp;
        public InputAction @RightPlayerDown => m_Wrapper.m_TwoPlayer_RightPlayerDown;
        public InputActionMap Get() { return m_Wrapper.m_TwoPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TwoPlayerActions set) { return set.Get(); }
        public void AddCallbacks(ITwoPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_TwoPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TwoPlayerActionsCallbackInterfaces.Add(instance);
            @LeftPlayerUp.started += instance.OnLeftPlayerUp;
            @LeftPlayerUp.performed += instance.OnLeftPlayerUp;
            @LeftPlayerUp.canceled += instance.OnLeftPlayerUp;
            @LeftPlayerDown.started += instance.OnLeftPlayerDown;
            @LeftPlayerDown.performed += instance.OnLeftPlayerDown;
            @LeftPlayerDown.canceled += instance.OnLeftPlayerDown;
            @RightPlayerUp.started += instance.OnRightPlayerUp;
            @RightPlayerUp.performed += instance.OnRightPlayerUp;
            @RightPlayerUp.canceled += instance.OnRightPlayerUp;
            @RightPlayerDown.started += instance.OnRightPlayerDown;
            @RightPlayerDown.performed += instance.OnRightPlayerDown;
            @RightPlayerDown.canceled += instance.OnRightPlayerDown;
        }

        private void UnregisterCallbacks(ITwoPlayerActions instance)
        {
            @LeftPlayerUp.started -= instance.OnLeftPlayerUp;
            @LeftPlayerUp.performed -= instance.OnLeftPlayerUp;
            @LeftPlayerUp.canceled -= instance.OnLeftPlayerUp;
            @LeftPlayerDown.started -= instance.OnLeftPlayerDown;
            @LeftPlayerDown.performed -= instance.OnLeftPlayerDown;
            @LeftPlayerDown.canceled -= instance.OnLeftPlayerDown;
            @RightPlayerUp.started -= instance.OnRightPlayerUp;
            @RightPlayerUp.performed -= instance.OnRightPlayerUp;
            @RightPlayerUp.canceled -= instance.OnRightPlayerUp;
            @RightPlayerDown.started -= instance.OnRightPlayerDown;
            @RightPlayerDown.performed -= instance.OnRightPlayerDown;
            @RightPlayerDown.canceled -= instance.OnRightPlayerDown;
        }

        public void RemoveCallbacks(ITwoPlayerActions instance)
        {
            if (m_Wrapper.m_TwoPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITwoPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_TwoPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TwoPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TwoPlayerActions @TwoPlayer => new TwoPlayerActions(this);
    public interface ISinglePlayerActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
    public interface ITwoPlayerActions
    {
        void OnLeftPlayerUp(InputAction.CallbackContext context);
        void OnLeftPlayerDown(InputAction.CallbackContext context);
        void OnRightPlayerUp(InputAction.CallbackContext context);
        void OnRightPlayerDown(InputAction.CallbackContext context);
    }
}
