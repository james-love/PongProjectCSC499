//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""SinglePlayer"",
            ""id"": ""9fd26f37-e625-4073-9688-586f36512658"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""80b81f0c-7079-460c-b035-838f37dad55f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Up/Down"",
                    ""id"": ""a96a28f6-7cab-4a41-a82f-ca483d758ea0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""35588f82-0612-41c8-8fb4-ffea1bf5eb74"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""89740205-9247-4ba7-b223-be6e98333100"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""TwoPlayer"",
            ""id"": ""8cb12430-8460-4903-b6bf-84b502a0e336"",
            ""actions"": [
                {
                    ""name"": ""LeftPlayerMove"",
                    ""type"": ""Value"",
                    ""id"": ""1cca0200-a9e4-4068-b1a5-04c02d202131"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightPlayerMove"",
                    ""type"": ""Value"",
                    ""id"": ""c8764e59-22cf-4c50-abbd-7a1dcfe18790"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Up/Down"",
                    ""id"": ""12b6db0e-8534-42ae-bc44-5d6eefac5afc"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPlayerMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""acfed657-9705-4b29-bca5-11c86a36bb43"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7713dfef-6514-41f3-b37c-50d14aa18e99"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Up/Down"",
                    ""id"": ""1ee9bba4-47b6-420d-b8e5-7b44bac88714"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPlayerMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""21b43bdc-7a93-44f3-b2a6-4bfd12cf863e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""02571319-5f59-472d-b0f7-e103baeb1cae"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SinglePlayer
        m_SinglePlayer = asset.FindActionMap("SinglePlayer", throwIfNotFound: true);
        m_SinglePlayer_Move = m_SinglePlayer.FindAction("Move", throwIfNotFound: true);
        // TwoPlayer
        m_TwoPlayer = asset.FindActionMap("TwoPlayer", throwIfNotFound: true);
        m_TwoPlayer_LeftPlayerMove = m_TwoPlayer.FindAction("LeftPlayerMove", throwIfNotFound: true);
        m_TwoPlayer_RightPlayerMove = m_TwoPlayer.FindAction("RightPlayerMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SinglePlayer
    private readonly InputActionMap m_SinglePlayer;
    private List<ISinglePlayerActions> m_SinglePlayerActionsCallbackInterfaces = new List<ISinglePlayerActions>();
    private readonly InputAction m_SinglePlayer_Move;
    public struct SinglePlayerActions
    {
        private @Controls m_Wrapper;
        public SinglePlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_SinglePlayer_Move;
        public InputActionMap Get() { return m_Wrapper.m_SinglePlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SinglePlayerActions set) { return set.Get(); }
        public void AddCallbacks(ISinglePlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(ISinglePlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(ISinglePlayerActions instance)
        {
            if (m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISinglePlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_SinglePlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SinglePlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SinglePlayerActions @SinglePlayer => new SinglePlayerActions(this);

    // TwoPlayer
    private readonly InputActionMap m_TwoPlayer;
    private List<ITwoPlayerActions> m_TwoPlayerActionsCallbackInterfaces = new List<ITwoPlayerActions>();
    private readonly InputAction m_TwoPlayer_LeftPlayerMove;
    private readonly InputAction m_TwoPlayer_RightPlayerMove;
    public struct TwoPlayerActions
    {
        private @Controls m_Wrapper;
        public TwoPlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftPlayerMove => m_Wrapper.m_TwoPlayer_LeftPlayerMove;
        public InputAction @RightPlayerMove => m_Wrapper.m_TwoPlayer_RightPlayerMove;
        public InputActionMap Get() { return m_Wrapper.m_TwoPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TwoPlayerActions set) { return set.Get(); }
        public void AddCallbacks(ITwoPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_TwoPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TwoPlayerActionsCallbackInterfaces.Add(instance);
            @LeftPlayerMove.started += instance.OnLeftPlayerMove;
            @LeftPlayerMove.performed += instance.OnLeftPlayerMove;
            @LeftPlayerMove.canceled += instance.OnLeftPlayerMove;
            @RightPlayerMove.started += instance.OnRightPlayerMove;
            @RightPlayerMove.performed += instance.OnRightPlayerMove;
            @RightPlayerMove.canceled += instance.OnRightPlayerMove;
        }

        private void UnregisterCallbacks(ITwoPlayerActions instance)
        {
            @LeftPlayerMove.started -= instance.OnLeftPlayerMove;
            @LeftPlayerMove.performed -= instance.OnLeftPlayerMove;
            @LeftPlayerMove.canceled -= instance.OnLeftPlayerMove;
            @RightPlayerMove.started -= instance.OnRightPlayerMove;
            @RightPlayerMove.performed -= instance.OnRightPlayerMove;
            @RightPlayerMove.canceled -= instance.OnRightPlayerMove;
        }

        public void RemoveCallbacks(ITwoPlayerActions instance)
        {
            if (m_Wrapper.m_TwoPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITwoPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_TwoPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TwoPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TwoPlayerActions @TwoPlayer => new TwoPlayerActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface ISinglePlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ITwoPlayerActions
    {
        void OnLeftPlayerMove(InputAction.CallbackContext context);
        void OnRightPlayerMove(InputAction.CallbackContext context);
    }
}
